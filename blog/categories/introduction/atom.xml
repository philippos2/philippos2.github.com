<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: introduction | Philippos Blue Book]]></title>
  <link href="http://philippos2.github.io/blog/categories/introduction/atom.xml" rel="self"/>
  <link href="http://philippos2.github.io/"/>
  <updated>2014-04-13T14:33:45+09:00</updated>
  <id>http://philippos2.github.io/</id>
  <author>
    <name><![CDATA[Philippos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[scalatra introduction]]></title>
    <link href="http://philippos2.github.io/blog/2014/04/13/scalatra-introduction/"/>
    <updated>2014-04-13T11:16:00+09:00</updated>
    <id>http://philippos2.github.io/blog/2014/04/13/scalatra-introduction</id>
    <content type="html"><![CDATA[<p>【scalatra 環境構築メモ】</p>

<p>■scalatra本体、関連ツール導入</p>

<h1>1. Scala本体</h1>

<p>Scala公式サイト(<a href="http://www.scala-lang.org/download/">http://www.scala-lang.org/download/</a>) よりバイナリファイル (tgzファイル)をダウンロードし、/usr/bin以下に展開。</p>

<h1>2. SBT</h1>

<p>SBT公式サイト(<a href="http://www.scala-sbt.org/release/docs/Getting-Started/Setup.html#unix">http://www.scala-sbt.org/release/docs/Getting-Started/Setup.html#unix</a>)からsbt-launch.jarを取得し、~/binに配置。
SBT公式サイトの勧めに従い、起動用スクリプトを作成する。単に以下をコピペし、~/bin/sbtとして保存。</p>

<p><code>
SBT_OPTS="-Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M"
java $SBT_OPTS -jar `dirname $0`/sbt-launch.jar "$@"
</code></p>

<h1>3. Conscript</h1>

<p>以下を実行する。</p>

<p><code>
$ curl https://raw.github.com/n8han/conscript/master/setup.sh | sh
</code></p>

<p>結果、スクリプト ~/bin/cs が作成されたことを確認すること。</p>

<h1>4. giter8</h1>

<p>以下を実行する。</p>

<p><code>
$ cs n8han/giter8
</code></p>

<p>結果、スクリプト ~/bin/g8 が作成されたことを確認すること。</p>

<p>■scalatraプロジェクトの作成</p>

<p>任意のパスで以下を実行し、ドメイン設定、パッケージ名、プロジェクト名等を設定しscalatraプロジェクトを作成する。</p>

<p><code>
$ g8 scalatra/scalatra-sbt
</code></p>

<p>■scalatraサーバの起動</p>

<p>プロジェクトディレクトリ以下に移動し、sbtを起動し、コマンド <code>container:start</code> としてscalatraサーバを起ち上げる。</p>

<hr />

<p>参考サイト：  <br/>
<a href="https://gist.github.com/kmizu/1876800">https://gist.github.com/kmizu/1876800</a>  <br/>
<a href="http://scalajp.github.io/sbt-getting-started-guide-ja/">http://scalajp.github.io/sbt-getting-started-guide-ja/</a>  <br/>
<a href="http://qiita.com/k_ui/items/65def414bd7ec54aedeb">http://qiita.com/k_ui/items/65def414bd7ec54aedeb</a>  <br/>
<a href="http://diario.hatenablog.com/entry/2013/08/25/041417">http://diario.hatenablog.com/entry/2013/08/25/041417</a>  <br/>
<a href="http://sgykfjsm.github.io/blog/2013/02/22/scalatra-tutorial-001/">http://sgykfjsm.github.io/blog/2013/02/22/scalatra-tutorial-001/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scala play2 introduction]]></title>
    <link href="http://philippos2.github.io/blog/2013/12/15/scala-play2-introduction/"/>
    <updated>2013-12-15T21:40:00+09:00</updated>
    <id>http://philippos2.github.io/blog/2013/12/15/scala-play2-introduction</id>
    <content type="html"><![CDATA[<p>【Scala / play2 導入メモ】2013/12/14～</p>

<p>Play2 version: 2.2.0
Scala version: 2.10.2 (OpenJDK 64-Bit Server VM, Java 1.6.0_27).</p>

<p>以下、ホームディレクトリにて行う。</p>

<p>■準備</p>

<p>事前に Java 開発環境のインストールをしておくこと。</p>

<p><code>
$ sudo aptitude install openjdk-6-jdk
</code></p>

<p>■play2 フレームワークの取得と展開</p>

<p>```
$ wget <a href="http://downloads.typesafe.com/play/2.2.0/play-2.2.0.zip">http://downloads.typesafe.com/play/2.2.0/play-2.2.0.zip</a></p>

<p>$ unzip play-2.2.0.zip</p>

<p>$ sudo mv play-2.2.0 /usr/local</p>

<p>$ cd /usr/bin</p>

<p>$ sudo ln -s /usr/local/play-2.2.0/play play
```</p>

<p>■動作確認</p>

<p>```
$ play</p>

<p>zsh: correct &lsquo;play&rsquo; to &lsquo;aplay&rsquo; [nyae]? n
Getting com.typesafe.play console_2.10 2.2.0 &hellip;
:: retrieving :: org.scala-sbt#boot-app
confs: [default]
6 artifacts copied, 0 already retrieved (2012kB/93ms)
Getting Scala 2.10.2 (for console)&hellip;
:: retrieving :: org.scala-sbt#boot-scala
confs: [default]
5 artifacts copied, 0 already retrieved (24390kB/2078ms)
_
 _ <strong> | | </strong> _ _  _
 | &lsquo;<em> \| |/ </em>&rsquo; | || |
 |  <strong>/|<em>|_</em></strong>|_<em> /
 |</em>|            |__/</p>

<p>play 2.2.0 built with Scala 2.10.2 (running Java 1.6.0_18), <a href="http://www.playframework.com">http://www.playframework.com</a></p>

<p>This is not a play application!</p>

<p>Use <code>play new</code> to create a new Play application in the current directory,
or go to an existing application and launch the development console using <code>play</code>.</p>

<p>You can also browse the complete documentation at <a href="http://www.playframework.com.">http://www.playframework.com.</a>
```</p>

<p>■Scalaプロジェクト作成</p>

<p>```
$ play new testPlay</p>

<p>zsh: correct &lsquo;play&rsquo; to &lsquo;aplay&rsquo; [nyae]? n
_
 _ <strong> | | </strong> _ _  _
 | &lsquo;<em> \| |/ </em>&rsquo; | || |
 |  <strong>/|<em>|_</em></strong>|_<em> /
 |</em>|            |__/</p>

<p>play 2.2.0 built with Scala 2.10.2 (running Java 1.6.0_18), <a href="http://www.playframework.com">http://www.playframework.com</a></p>

<p>The new application will be created in /home/philippos/testPlay</p>

<p>What is the application name? [testPlay]</p>

<blockquote></blockquote>

<p>Which template do you want to use for this new application?</p>

<p>1             &ndash; Create a simple Scala application
2             &ndash; Create a simple Java application</p>

<blockquote><p>1
OK, application testPlay is created.</p></blockquote>

<p>Have fun!</p>

<p>$ tree testPlay</p>

<p>testPlay
|&mdash; README
|&mdash; app
|   |&mdash; controllers
|   |   <code>-- Application.scala
|  </code>&mdash; views
|       |&mdash; index.scala.html
|       <code>-- main.scala.html
|-- build.sbt
|-- conf
|   |-- application.conf
|  </code>&mdash; routes
|&mdash; project
|   |&mdash; build.properties
|   <code>-- plugins.sbt
|-- public
|   |-- images
|   |  </code>&mdash; favicon.png
|   |&mdash; javascripts
|   |   <code>-- jquery-1.9.0.min.js
|  </code>&mdash; stylesheets
|       <code>-- main.css
</code>&mdash; test</p>

<pre><code>|-- ApplicationSpec.scala
`-- IntegrationSpec.scala
</code></pre>

<p>10 directories, 14 files
```</p>

<p>■playアプリケーションの実行</p>

<p>```
$ play run</p>

<p>[info] Loading project definition from /home/philippos/testPlay/project
[info] Set current project to testPlay (in build file:/home/philippos/testPlay/)</p>

<p>Cannot load the JNotify native library (/home/philippos/testPlay/target/native_libraries/64bits/libjnotify.so: /lib/libc.so.6: version `GLIBC_2.12' not found (required by /home/philippos/testPlay/target/native_libraries/64bits/libjnotify.so))
Play will check file changes for each request, so expect degraded reloading performace.</p>

<p>&mdash;&ndash; (Running the application from SBT, auto-reloading is enabled) &mdash;&ndash;</p>

<p>[info] play &ndash; Listening for HTTP on /0:0:0:0:0:0:0:0:9000</p>

<p>(Server started, use Ctrl+D to stop and go back to the console&hellip;)</p>

<p>[info] Compiling 5 Scala sources and 1 Java source to /home/philippos/testPlay/target/scala-2.10/classes&hellip;
[info] play &ndash; Application started (Dev)
```</p>

<p>下記URLでアクセスし動作を確認する。</p>

<p><a href="http://localhost:9000/">http://localhost:9000/</a></p>

<p>■対話型実況環境（REPL）の起動</p>

<p><code>
$ play console                                                                                                                                                                    [21:19:14]
[info] Loading project definition from /home/philippos/testPlay/project
[info] Set current project to testPlay (in build file:/home/philippos/testPlay/)
[info] Starting scala interpreter...
[info]
Welcome to Scala version 2.10.2 (OpenJDK 64-Bit Server VM, Java 1.6.0_27).
Type in expressions to have them evaluated.
Type :help for more information.
</code></p>

<p>終了するときは、:quit とする。</p>

<hr />

<p>■参考サイト：</p>

<p><a href="http://www.playframework.com/download">http://www.playframework.com/download</a>  <br/>
<a href="http://yksris.hatenablog.com/entry/2013/01/06/134353">http://yksris.hatenablog.com/entry/2013/01/06/134353</a>  <br/>
<a href="http://tech-sketch.jp/2013/11/scala-play2-1.html">http://tech-sketch.jp/2013/11/scala-play2-1.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim plugins for git introduction]]></title>
    <link href="http://philippos2.github.io/blog/2013/08/04/vim-plugins-for-git-introduction/"/>
    <updated>2013-08-04T09:45:00+09:00</updated>
    <id>http://philippos2.github.io/blog/2013/08/04/vim-plugins-for-git-introduction</id>
    <content type="html"><![CDATA[<h3>git 関連 vim プラグイン導入</h3>

<p>今回 vim 上で git コマンドを実行することのできる vim プラグインをふたつ導入した。 <br/>
理由は不明だが、BundleInstallでふたついっぺんにインストールしようとするとインストールに失敗してしまうので、ひとつずつインストールすること。</p>

<h4>■fugitive 導入</h4>

<p><a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a></p>

<p>~/.vimrc に以下を追記後、vim 上からBundleInstallする。</p>

<p><code>
"for git
Bundle 'tpope/vim-fugitive'
</code></p>

<h4>■fugitive 使用方法</h4>

<p>具体的な使用方法は、以下のサイトに詳しい。 <br/>
<a href="http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/">http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/</a></p>

<h5>主なコマンド</h5>

<p>fugitive を導入後、vim のコマンドモードで以下のコマンドを使用することができる。</p>

<blockquote><p>Gstatus (= git status : リポジトリ状態) <br/>
Gdiff (= git diff : 差分) <br/>
Gwrite (= git add : 追加) <br/>
Gremove (= git rm : 削除) <br/>
Gcommit (= git commit : コミット)</p></blockquote>

<hr />

<p>参考サイト： <br/>
<a href="http://yuku-tech.hatenablog.com/entry/20110427/1303868482">http://yuku-tech.hatenablog.com/entry/20110427/1303868482</a> <br/>
<a href="http://cohama.hateblo.jp/entry/20120317/1331978764">http://cohama.hateblo.jp/entry/20120317/1331978764</a> <br/>
<a href="http://www.makies.com/2011/11/302/">http://www.makies.com/2011/11/302/</a></p>

<h4>■gitv 導入</h4>

<p>gitv は GUIによる git 用ツールである gitk と同等の目的と使用感を目指して作成された vim プラグインである。</p>

<p><a href="https://github.com/gregsexton/gitv">https://github.com/gregsexton/gitv</a></p>

<p>~/.vimrc に以下を追記後、vim 上からBundleInstallする。</p>

<p><code>
Bundle 'gitv'
</code></p>

<h4>■gitv 使用方法</h4>

<p>vim のコマンドモードで <code>Gitv</code> とするとブラウザモードに移行する。 <br/>
また <code>Gitv!</code> とするとファイルモードに移行する。 <br/>
ブラウザモードでは、これまでのコミット情報を参照できる。 <br/>
ファイルモードでは、対象とするファイルの履歴を参照できる。</p>

<hr />

<p>参考サイト： <br/>
<a href="http://cohama.hateblo.jp/entry/20120417/1334679297">http://cohama.hateblo.jp/entry/20120417/1334679297</a> <br/>
<a href="http://matsu.teraren.com/blog/2012/03/16/gitv/">http://matsu.teraren.com/blog/2012/03/16/gitv/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[z-shell-introduction]]></title>
    <link href="http://philippos2.github.io/blog/2013/08/03/z-shell-introduction/"/>
    <updated>2013-08-03T18:26:00+09:00</updated>
    <id>http://philippos2.github.io/blog/2013/08/03/z-shell-introduction</id>
    <content type="html"><![CDATA[<h3>z-shell 導入</h3>

<p>tmux 上の作業用 shell を bash から bash と比較して多機能かつ高速であるとされる z-shell へ移行した。</p>

<p><a href="http://www.zsh.org/">http://www.zsh.org/</a></p>

<h4>■z-shell のインストール</h4>

<p><code>
$ sudo aptitude install zsh
</code></p>

<p>tmuxの設定ファイル（.tmux.conf）に、下記の設定を追記する。</p>

<p><code>
set-option -g default-shell /bin/zsh
</code></p>

<p>上記設定を追加後、tmux を再起動する。
tmux を再起動してから使用されている shell の種類を確認すること。</p>

<p><code>
$ echo $SHELL
</code></p>

<h5>その他</h5>

<p>zsh によるグロッピングが原因で octopress 用のコマンドがエラーとなってしまうため、.zshrc にグロッピング禁止の設定を追加する。 <br/>
~/.zshrc に以下を追記すること。</p>

<p><code>
setopt nonomatch # for octopress
</code></p>

<h4>■oh-my-zsh のインストール</h4>

<p>設定ファイル集 oh-my-zsh を利用する。</p>

<p><code>
git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></p>

<p>以下のサイトのプレビューからテーマを選択する。</p>

<p><a href="http://zshthem.es/all/">http://zshthem.es/all/</a></p>

<p>これらのテーマの中には、ローカルの git リポジトリ状態（対象ブランチ、編集中か否か、等）を shell prompt に表示するものもあるので利用したい。 <br/>
今回はテーマとして、'pmcgee' を採用した。
.zshrc 中の以下の変数を編集する。</p>

<p><code>
ZSH_THEME="pmcgee"
</code></p>

<p>tmux を再起動してテーマが正しく設定されているか確認すること。</p>

<hr />

<p>参考サイト： <br/>
<a href="http://news.mynavi.jp/column/zsh/022/index.html">http://news.mynavi.jp/column/zsh/022/index.html</a> <br/>
<a href="http://shanon-tech.blogspot.jp/2012/10/zsh.html">http://shanon-tech.blogspot.jp/2012/10/zsh.html</a> <br/>
<a href="http://d.hatena.ne.jp/eitya/20110707/1310023383">http://d.hatena.ne.jp/eitya/20110707/1310023383</a> <br/>
<a href="http://zshthem.es/all/">http://zshthem.es/all/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux-introduction]]></title>
    <link href="http://philippos2.github.io/blog/2013/08/03/tmux-introduction/"/>
    <updated>2013-08-03T18:11:00+09:00</updated>
    <id>http://philippos2.github.io/blog/2013/08/03/tmux-introduction</id>
    <content type="html"><![CDATA[<h3>仮想端末管理ツール tmux 導入</h3>

<p>端末多重化による作業効率化を期待して tmux を導入した。</p>

<p><a href="http://tmux.sourceforge.net/">http://tmux.sourceforge.net/</a></p>

<h4>■tmux のインストール</h4>

<p><code>
$ sudo aptitude install tmux
</code></p>

<h4>■tmux の自動起動設定</h4>

<p>以下を .bashrc に追記する。
以下の設定では既に tmux が起動している場合、既存の tmux プロセスへのアタッチのみ行う。</p>

<p>```
if [ -z $TMUX ]; then
  if $(tmux has-session 2> /dev/null); then</p>

<pre><code>tmux -2 attach
</code></pre>

<p>  else</p>

<pre><code>tmux -2
</code></pre>

<p>  fi
fi
```</p>

<h4>■tmux で代表的な操作方法</h4>

<p>以下で <code>C-b</code> は、<code>Ctrl + bind</code> の意。</p>

<p>・ウィンドウ作成</p>

<blockquote><p>C-b c</p></blockquote>

<p>・ウィンドウ一覧表示／移動</p>

<blockquote><p>C-b w</p></blockquote>

<p>・前／次のウィンドウ移動</p>

<blockquote><p>C-b p    （pre）<br/>
C-b n    （next）</p></blockquote>

<p>・ウィンドウを強制終了</p>

<blockquote><p>C-b &amp;</p></blockquote>

<p>・ペイン分割</p>

<blockquote><p>C-b &ldquo;    （横に分割）<br/>
C-b %    （縦に分割）</p></blockquote>

<p>・ペイン分割解除</p>

<blockquote><p>C-b !</p></blockquote>

<p>・ペイン強制終了</p>

<blockquote><p>C-b x</p></blockquote>

<p>・ペイン間移動</p>

<blockquote><p>C-b o</p></blockquote>

<p>・ペインを入れ替え</p>

<blockquote><p>C-b {</p></blockquote>

<p>・セッションのデタッチ</p>

<blockquote><p>C-b d</p></blockquote>

<hr />

<p>参考サイト： <br/>
<a href="http://komasaru.github.io/blog/2013/06/06/linux-mint-tmux-auto-attach/">http://komasaru.github.io/blog/2013/06/06/linux-mint-tmux-auto-attach/</a> <br/>
<a href="http://shanon-tech.blogspot.jp/2012/05/tmux.html">http://shanon-tech.blogspot.jp/2012/05/tmux.html</a> <br/>
<a href="http://room6933.com/mymemo/tmux/tmux-basic.html">http://room6933.com/mymemo/tmux/tmux-basic.html</a> <br/>
<a href="http://www.omakase.org/misc/tmux_screen.html">http://www.omakase.org/misc/tmux_screen.html</a></p>
]]></content>
  </entry>
  
</feed>
