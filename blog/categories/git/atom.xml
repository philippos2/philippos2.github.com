<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Philippos Blue Book]]></title>
  <link href="http://philippos2.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://philippos2.github.io/"/>
  <updated>2014-04-13T13:20:41+09:00</updated>
  <id>http://philippos2.github.io/</id>
  <author>
    <name><![CDATA[Philippos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vim plugins for git introduction]]></title>
    <link href="http://philippos2.github.io/blog/2013/08/04/vim-plugins-for-git-introduction/"/>
    <updated>2013-08-04T09:45:00+09:00</updated>
    <id>http://philippos2.github.io/blog/2013/08/04/vim-plugins-for-git-introduction</id>
    <content type="html"><![CDATA[<h3>git 関連 vim プラグイン導入</h3>

<p>今回 vim 上で git コマンドを実行することのできる vim プラグインをふたつ導入した。 <br/>
理由は不明だが、BundleInstallでふたついっぺんにインストールしようとするとインストールに失敗してしまうので、ひとつずつインストールすること。</p>

<h4>■fugitive 導入</h4>

<p><a href="https://github.com/tpope/vim-fugitive">https://github.com/tpope/vim-fugitive</a></p>

<p>~/.vimrc に以下を追記後、vim 上からBundleInstallする。</p>

<p><code>
"for git
Bundle 'tpope/vim-fugitive'
</code></p>

<h4>■fugitive 使用方法</h4>

<p>具体的な使用方法は、以下のサイトに詳しい。 <br/>
<a href="http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/">http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/</a></p>

<h5>主なコマンド</h5>

<p>fugitive を導入後、vim のコマンドモードで以下のコマンドを使用することができる。</p>

<blockquote><p>Gstatus (= git status : リポジトリ状態) <br/>
Gdiff (= git diff : 差分) <br/>
Gwrite (= git add : 追加) <br/>
Gremove (= git rm : 削除) <br/>
Gcommit (= git commit : コミット)</p></blockquote>

<hr />

<p>参考サイト： <br/>
<a href="http://yuku-tech.hatenablog.com/entry/20110427/1303868482">http://yuku-tech.hatenablog.com/entry/20110427/1303868482</a> <br/>
<a href="http://cohama.hateblo.jp/entry/20120317/1331978764">http://cohama.hateblo.jp/entry/20120317/1331978764</a> <br/>
<a href="http://www.makies.com/2011/11/302/">http://www.makies.com/2011/11/302/</a></p>

<h4>■gitv 導入</h4>

<p>gitv は GUIによる git 用ツールである gitk と同等の目的と使用感を目指して作成された vim プラグインである。</p>

<p><a href="https://github.com/gregsexton/gitv">https://github.com/gregsexton/gitv</a></p>

<p>~/.vimrc に以下を追記後、vim 上からBundleInstallする。</p>

<p><code>
Bundle 'gitv'
</code></p>

<h4>■gitv 使用方法</h4>

<p>vim のコマンドモードで <code>Gitv</code> とするとブラウザモードに移行する。 <br/>
また <code>Gitv!</code> とするとファイルモードに移行する。 <br/>
ブラウザモードでは、これまでのコミット情報を参照できる。 <br/>
ファイルモードでは、対象とするファイルの履歴を参照できる。</p>

<hr />

<p>参考サイト： <br/>
<a href="http://cohama.hateblo.jp/entry/20120417/1334679297">http://cohama.hateblo.jp/entry/20120417/1334679297</a> <br/>
<a href="http://matsu.teraren.com/blog/2012/03/16/gitv/">http://matsu.teraren.com/blog/2012/03/16/gitv/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[z-shell-introduction]]></title>
    <link href="http://philippos2.github.io/blog/2013/08/03/z-shell-introduction/"/>
    <updated>2013-08-03T18:26:00+09:00</updated>
    <id>http://philippos2.github.io/blog/2013/08/03/z-shell-introduction</id>
    <content type="html"><![CDATA[<h3>z-shell 導入</h3>

<p>tmux 上の作業用 shell を bash から bash と比較して多機能かつ高速であるとされる z-shell へ移行した。</p>

<p><a href="http://www.zsh.org/">http://www.zsh.org/</a></p>

<h4>■z-shell のインストール</h4>

<p><code>
$ sudo aptitude install zsh
</code></p>

<p>tmuxの設定ファイル（.tmux.conf）に、下記の設定を追記する。</p>

<p><code>
set-option -g default-shell /bin/zsh
</code></p>

<p>上記設定を追加後、tmux を再起動する。
tmux を再起動してから使用されている shell の種類を確認すること。</p>

<p><code>
$ echo $SHELL
</code></p>

<h5>その他</h5>

<p>zsh によるグロッピングが原因で octopress 用のコマンドがエラーとなってしまうため、.zshrc にグロッピング禁止の設定を追加する。 <br/>
~/.zshrc に以下を追記すること。</p>

<p><code>
setopt nonomatch # for octopress
</code></p>

<h4>■oh-my-zsh のインストール</h4>

<p>設定ファイル集 oh-my-zsh を利用する。</p>

<p><code>
git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></p>

<p>以下のサイトのプレビューからテーマを選択する。</p>

<p><a href="http://zshthem.es/all/">http://zshthem.es/all/</a></p>

<p>これらのテーマの中には、ローカルの git リポジトリ状態（対象ブランチ、編集中か否か、等）を shell prompt に表示するものもあるので利用したい。 <br/>
今回はテーマとして、'pmcgee' を採用した。
.zshrc 中の以下の変数を編集する。</p>

<p><code>
ZSH_THEME="pmcgee"
</code></p>

<p>tmux を再起動してテーマが正しく設定されているか確認すること。</p>

<hr />

<p>参考サイト： <br/>
<a href="http://news.mynavi.jp/column/zsh/022/index.html">http://news.mynavi.jp/column/zsh/022/index.html</a> <br/>
<a href="http://shanon-tech.blogspot.jp/2012/10/zsh.html">http://shanon-tech.blogspot.jp/2012/10/zsh.html</a> <br/>
<a href="http://d.hatena.ne.jp/eitya/20110707/1310023383">http://d.hatena.ne.jp/eitya/20110707/1310023383</a> <br/>
<a href="http://zshthem.es/all/">http://zshthem.es/all/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby1.9-rails3-appendix]]></title>
    <link href="http://philippos2.github.io/blog/2013/07/01/ruby1-dot-9-rails3-appendix/"/>
    <updated>2013-07-01T23:07:00+09:00</updated>
    <id>http://philippos2.github.io/blog/2013/07/01/ruby1-dot-9-rails3-appendix</id>
    <content type="html"><![CDATA[<h3>5. 補足その他</h3>

<h4>aptitude パッケージ一覧更新（root権限で実行）</h4>

<p>```</p>

<h1>aptitude update</h1>

<p>```</p>

<h4>rubygemsでのパッケージ検索</h4>

<p><code>
$ gem search --remote &lt;検索文字列&gt;
$ gem search -r &lt;検索文字列&gt;
</code></p>

<h4>コントローラの追加</h4>

<p><code>
$ rails generate controller &lt;コントローラ名&gt; &lt;アクション名&gt;
$ rails g controller &lt;コントローラ名&gt; &lt;アクション名&gt;
</code></p>

<h4>コントローラの削除（destroyの省略形は無し）</h4>

<p><code>
$ rails destroy controller &lt;コントローラ名&gt; &lt;アクション名&gt;
</code></p>

<hr />

<h3>5-1. [補足追加] PostgreSQLの設定／動作確認</h3>

<p>psql (PostgreSQL) バージョン：8.4.11</p>

<h4>アクセス許可設定の変更</h4>

<p>/etc/postgresql/8.4/main/pg_hba.conf をroot権限で編集する</p>

<p>68 行目辺りから
```
77c77</p>

<h2>&lt; local   all         postgres                          trust</h2>

<blockquote><p>local   all         postgres                          ident
82c82</p>

<h2>&lt; local   all         all                               trust</h2>

<p>local   all         all                               ident
84c84</p>

<h2>&lt; host    all         all         127.0.0.1/32          trust</h2>

<p>host    all         all         127.0.0.1/32          md5
86c86</p>

<h2>&lt; host    all         all         ::1/128               trust</h2>

<p>host    all         all         ::1/128               md5
```</p></blockquote>

<h4>上記を変更後、root権限にてpsqlデーモンを再起動する</h4>

<p>```</p>

<h1>/etc/init.d/postgresql restart</h1>

<p>```</p>

<h4>その後、psqlに接続しテーブル等を確認する</h4>

<p><code>
$ psql -U postgres
</code></p>

<h4>rails3 でPostgresSQLを使用可能にする</h4>

<h4>root権限で postgresql-server-dev-8.4 をインストールする</h4>

<p>```</p>

<h1>aptitude -y install postgresql-server-dev-8.4</h1>

<p>```</p>

<h4>gem用Postgresパッケージをインストール</h4>

<p><code>
$ gem install pg
</code></p>

<h4>サンプルアプリを作成し、PostgreSQLとの連携テストを行う</h4>

<p>例）
<code>
$ rails new psqldemo -d postgresql
</code></p>

<h4>アプリ内のGemfileに以下の行を追加</h4>

<p><code>
gem 'pg'
gem 'therubyracer'
</code></p>

<h4>バンドルすべきgemパッケージをインストール</h4>

<p><code>
$ bundle intall
</code></p>

<h4>新規にrailsアプリが生成されたことを確認し、config/database.ymlのユーザ名を'postgres'に書き換える</h4>

<h4>scaffoldを行う</h4>

<p><code>
$ rails g scaffold user name:string age:integer
</code></p>

<h4>データベースを作成した後、migrationを行う</h4>

<p><code>
$ rake db:create
$ rake db:migrate
</code></p>

<h4>migrationを行った後、WEBrickを起動させ、ブラウザでアプリの挙動を確認する</h4>

<p><code>
$ rails server
</code></p>

<p>参考：<br/>
<a href="http://honana.com/postgresql/82/setting.html  ">http://honana.com/postgresql/82/setting.html  </a>
<a href="http://d.hatena.ne.jp/f_world21/20110601/1306944597">http://d.hatena.ne.jp/f_world21/20110601/1306944597</a></p>

<hr />

<h3>5-2. [補足追加] Rails3における諸オペレーション</h3>

<h4>既存テーブルへのフィールド追加マイグレーション</h4>

<p>例）> rails g migration AddDate_of_issueToReceipts date_of_issue:date
文法）> rails g migration Add[追加したいカラム名]To[追加先のテーブル名] カラム名:データ型
<code>
$ rails g migration AddPriceToProduct price:decimal
</code></p>

<hr />

<h3>5-3. [補足追加] Ruby1.9 においてマルチバイト文字を扱うためのマジックコメント</h3>

<h4>Ryby1.9 においてコード中で日本語を扱う場合は、ファイルの先頭に以下のマジックコードを付加すること</h4>

<p>```</p>

<h1>encoding: utf-8</h1>

<p>```</p>

<hr />

<h3>5-4. [補足追加] .rvmrc</h3>

<h4>.rvmrcの設定をrailsプロジェクトのルートに置いておくこと</h4>

<p>設定例）</p>

<p>rvm use 1.9.3@rails32</p>

<hr />

<h3>6. pry導入</h3>

<p>pryはruby用高機能対話環境であり、一連の関連コンポネントは機能的にirb及びruby-debugを置換するものである</p>

<h4>Gemfileへの追記内容</h4>

<p>下記の内、コンポネント「pry-nav」がruby-debugと同機能のデバッガである</p>

<p>```
source &lsquo;<a href="http://rubygems.org">http://rubygems.org</a>&rsquo;</p>

<p>group :development do
  gem &lsquo;pry-rails&rsquo;
  # gem &lsquo;pry-coolline&rsquo;, :git => &lsquo;git://github.com/pry/pry-coolline.git&rsquo;
  gem &lsquo;pry-nav&rsquo;
  gem &lsquo;pry-exception_explorer&rsquo;
  gem &lsquo;hirb-unicode&rsquo;
end
```</p>

<h4>.pryrcの内容</h4>

<p>レコードセットを見易くするコンポネント「Hirb」の初期設定等を行う</p>

<p>```</p>

<h1><a href="https://github.com/pry/pry/wiki/FAQ#wiki-hirb">https://github.com/pry/pry/wiki/FAQ#wiki-hirb</a></h1>

<p>require &lsquo;hirb&rsquo;</p>

<p>Hirb.enable</p>

<p>old_print = Pry.config.print
Pry.config.print = proc do |output, value|
  Hirb::View.view_or_page_output(value) || old_print.call(output, value)
end
```</p>

<p>参考：<br/>
<a href="http://labs.timedia.co.jp/2011/12/rubyist-should-use-pry.html  ">http://labs.timedia.co.jp/2011/12/rubyist-should-use-pry.html  </a>
<a href="http://m4i.hatenablog.com/entry/2012/02/22/091501  ">http://m4i.hatenablog.com/entry/2012/02/22/091501  </a>
<a href="http://blog.kiftwi.net/2012/03/20/summary-of-pry-plugins/  ">http://blog.kiftwi.net/2012/03/20/summary-of-pry-plugins/  </a>
<a href="http://qiita.com/items/9f7c6b68688e11e962b9">http://qiita.com/items/9f7c6b68688e11e962b9</a> <br/>
<a href="http://d.hatena.ne.jp/joker1007/">http://d.hatena.ne.jp/joker1007/</a></p>

<hr />

<h3>7. RSpec（rails3.1以降の場合）</h3>

<p>Gemfileに下記を追記する</p>

<p><code>
gem 'rspec-rails'
</code></p>

<p>プロジェクトへrspecを適用する
```</p>

<h1>rails g rspec:install</h1>

<p>```</p>

<p>導入方法は以上</p>

<p>参考：<br/>
<a href="http://ginpen.com/2012/02/14/rspec-rails/">http://ginpen.com/2012/02/14/rspec-rails/</a></p>

<hr />

<h3>8. git導入</h3>

<p><code>
$ sudo aptitude install git
</code></p>
]]></content>
  </entry>
  
</feed>
